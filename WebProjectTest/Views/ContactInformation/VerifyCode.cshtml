@model WebProjectTest.Models.VerifyCodeViewModel
<div class="verification-container">
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    <div class="verification-form">
        <h2 class="verification-title">Authentifizierung zum digitalen Abrechnungsversand</h2>
        <form asp-controller="ContactInformation" asp-action="VerifyCode" method="post">
            <div class="form-group">
                <label for="autCode" class="form-label">Geben Sie den Authentifizierungscode aus der E-Mail / Brief ein:</label>
                <input type="number"
                       class="form-control verification-input"
                       id="autCode"
                       name="autCode"
                       required
                       min="0"
                       max="999999" />
            </div>
            <button type="submit" class="btn btn-primary mt-4">Bestätigen</button>
        </form>

        @if (ViewData["NotFound"] != null)
        {
            <div class="alert alert-danger mt-4" role="alert">
                Authentifizierungscode wurde nicht gefunden
            </div>
        }
        else if (Model.AutCode.HasValue)
        {
            <div class="mt-5">
                <h3 class="mb-4">Die Authentifizierung war erfolgreich:</h3>
                <div class="card">
                    <div class="card-body">
                        <p class="mb-3"><strong>Hinterlegte E-Mail Adresse:</strong> @Model.Email</p>
                        @if (Model.Contacts.Any())
                        {
                            <h4 class="mb-3">Zuständig für:</h4>
                            <ul class="list-unstyled">
                                @foreach (var contact in Model.Contacts)
                                {
                                    <li class="mb-2">@contact.VtgP_Name</li>
                                }
                            </ul>
                            <form asp-controller="ContactInformation" asp-action="SaveOptIn" method="post" class="mt-4">
                                <input type="hidden" name="autCode" value="@Model.AutCode" />
                                <input type="hidden" name="email" value="@Model.Email" />
                                
                                <!-- New Email Change Section -->
                                <div class="mb-4">
    <button type="button" class="btn btn-link text-muted p-0" onclick="toggleEmailChange()">
        <small>E-Mail-Adresse ändern</small>
    </button>
    
    <div id="emailChangeSection" style="display: none;" class="mt-3">
        <div class="form-group mb-3">
            <label for="newEmail">Neue E-Mail-Adresse:</label>
            <input type="email" class="form-control" id="newEmail" name="newEmail" />
        </div>
        <div class="form-group mb-3">
            <label for="confirmNewEmail">E-Mail-Adresse bestätigen:</label>
            <input type="email" class="form-control" id="confirmNewEmail" name="confirmNewEmail" />
        </div>
        <div id="emailMismatchError" class="alert alert-danger" style="display: none;">
            Die E-Mail-Adressen stimmen nicht überein.
        </div>
    </div>
</div>

                       <!-- Opt-in Checkbox with green highlight - adjusted padding and checkbox position -->
<div class="form-check mb-4 p-3 ps-5" style="background-color: #e8f5e9; border: 1px solid #c8e6c9; border-radius: 4px;">
    <input class="form-check-input ms-n4"
           type="checkbox"
           id="optIn"
           name="optIn"
           value="true"
           onchange="updateSaveButton()"
           @(Model.Contacts.Any(c => c.Honempf_Opt_In == "TRUE") ? "checked" : "")>
    <label class="form-check-label" for="optIn">
        <strong>Die Abrechnungen für die oben genannten Personen möchte ich in Zukunft digital erhalten.</strong>
    </label>
</div>

<!-- Environmental message with matching green theme -->
<div id="environmentalMessage" class="alert mb-3" 
     style="display: none; background-color: #f5f9f5; border: 1px solid #c8e6c9; color: #2e7d32;">
    Bitte wählen Sie den digitalen Versand aus, um einen nachhaltig positiven Einfluss auf die Umwelt zu nehmen.
</div>

<button type="submit" id="saveButton" class="btn btn-primary" disabled>Einstellungen speichern</button>
                            </form>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<script>
function toggleEmailChange() {
    const emailSection = document.getElementById('emailChangeSection');
    emailSection.style.display = emailSection.style.display === 'none' ? 'block' : 'none';
}

function validateEmails() {
    const newEmail = document.getElementById('newEmail').value;
    const confirmEmail = document.getElementById('confirmNewEmail').value;
    const errorDiv = document.getElementById('emailMismatchError');
    const submitButton = document.getElementById('saveButton');
    const optInCheckbox = document.getElementById('optIn');
    
    if (newEmail || confirmEmail) {
        if (newEmail !== confirmEmail) {
            errorDiv.style.display = 'block';
            submitButton.disabled = true;
        } else {
            errorDiv.style.display = 'none';
            submitButton.disabled = !optInCheckbox.checked; // Only enable if checkbox is checked
        }
    } else {
        errorDiv.style.display = 'none';
        submitButton.disabled = !optInCheckbox.checked; // Only enable if checkbox is checked
    }
}

function updateSaveButton() {
    const optInCheckbox = document.getElementById('optIn');
    const saveButton = document.getElementById('saveButton');
    const envMessage = document.getElementById('environmentalMessage');
    
    if (optInCheckbox.checked) {
        saveButton.classList.remove('btn-secondary');
        saveButton.classList.add('btn-primary');
        saveButton.disabled = false;
        envMessage.style.display = 'none';
    } else {
        saveButton.classList.remove('btn-primary');
        saveButton.classList.add('btn-secondary');
        saveButton.disabled = true;
        envMessage.style.display = 'block';
    }
}

// Add event listeners to both email fields
document.getElementById('newEmail').addEventListener('input', validateEmails);
document.getElementById('confirmNewEmail').addEventListener('input', validateEmails);

// Form submission handler as a backup validation
document.querySelector('form').addEventListener('submit', function(e) {
    const newEmail = document.getElementById('newEmail').value;
    const confirmEmail = document.getElementById('confirmNewEmail').value;
    
    if (newEmail || confirmEmail) {
        if (newEmail !== confirmEmail) {
            e.preventDefault();
            document.getElementById('emailMismatchError').style.display = 'block';
            return;
        }
    }
});

document.addEventListener('DOMContentLoaded', updateSaveButton);

</script>